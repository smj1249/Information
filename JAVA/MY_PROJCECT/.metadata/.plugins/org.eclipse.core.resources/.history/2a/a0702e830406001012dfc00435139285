package CH33;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

//제공되는 함수형 인터페이스들
//Function<T, R>:
//apply 메서드를 가지고 있어서 하나의 인자(T)를 받아서 결과(R)를 반환하는 함수형 인터페이스 입니다.

//Supplier<T>:
//get 메서드를 가지고 있어서 어떠한 인자도 받지 않고 결과만을 제공하는 함수형 인터페이스 입니다.
//
//Consumer<T>:
//accept 메서드를 가지고 있어서 어떠한 인자를 받아서 결과를 반환하지 않는 함수형 인터페이스 입니다.
//
//Predicate<T>:
//test 메서드를 가지고 있어서 어떠한 인자를 받아서 불리언 결과를 반환하는 함수형 인터페이스 입니다.
//
//UnaryOperator<T>:
//apply 메서드를 가지고 있어서 하나의 인자를 받아서 동일한 타입의 결과를 반환하는 함수형 인터페이스 입니다.
//
//BinaryOperator<T>:
//apply 메서드를 가지고 있어서 두 개의 인자를 받아서 동일한 타입의 결과를 반환하는 함수형 인터페이스 입니다.

public class C03FunctionalInterfaceMain {
	
	// 01
	public static Function<Integer, Integer> func1=x -> x*x;
	// 02
	public static Function<Integer, Integer> func2=x -> x+x;
	// 03
	public static Function<List<Integer>, Integer> func3=(x)->{x.stream().reduce(0,(sum,el)->{return sum+el;});
	// 04
	public static Function <List<Object>, Integer> func4=(li)->{
		// Integer 형만 필터링 (instanceof)
		// 누적합 (reduce)
		
		return -1;};
	};
	
	public static void main(String[] args) {

		// 01
		System.out.println(func1.apply(10));
		// 02
		System.out.println(func2.apply(10));
		// 03
		System.out.println(func3.apply(Arrays.asList(10,20,30,40)));


	}

}